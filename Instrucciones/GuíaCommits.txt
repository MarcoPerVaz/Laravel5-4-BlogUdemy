Commit - Creación del proyecto Laravel5-4_BlogUdemy
  -composer create-project --prefer-dist laravel/laravel Laravel5-4_BlogUdemy "5.4.*"
Commit - Se crea la carpeta Instrucciones
  -Se crea el archivo Instalación.txt
  -Se crea el archivo GuíaCommits.txt
Commit - Integrando la plantilla Zendero al proyecto Laravel5-4_BlogUdemy
  -Se copian las carpetas css, img y js de la carpeta descargada(Zendero) y se pegan en public/ del proyecto Laravel5-4_BlogUdemy
  -Se copia el contenido del archivo index.html de la carpeta descargada(Zendero) y se pega en la vista welcome.blade.php
  -Se edita la vista welcome quitando las partes que se usarán en todas las vistas y se pasa a la vista layout.blade.php
    -Se usan las directivas (@extends y @section) para vincular la vista con layout.blade.php
  -Se crea la vista layout.blade.php
    -Esta vista tendrá todo lo que se repite(head, header y footer) y las demás vistas solo agregarán el contenido del post
    -Se edita la vista layout usando la directiva (yield) para vincular con la directiva section
Commit - Creando la tabla posts y BD
  -Se modifica el archivo .env
    APP_URL=https://laravel5-4_blogudemy.it/
    DB_DATABASE=laravel54blogudemy
    DB_USERNAME=root
    DB_PASSWORD=
    -La base de datos se creó desde consola
      -se usa el comando mysql -uroot
      -CREATE DATABASE laravel54blogudemy;
  -Se usa el comando php artisan migrate
  -Error si se usa MariaDB : Specified key was too long; max key length es 767 bytes
    -Solución: Ir a app/Providers/appServiceProvider.php
      -En la función boot agregar:
        -Schema::defaultStringLength(191);
        Nota: Importar el Facade 
          -use Illuminate\Support\Facades\Schema;
    Nota: Solo si hubo el error se vuelve a usar el comando php artisan migrate
  -Se usa el comando php artisan make:model Post -m para crear un modelo con su migración
    -Dónde Post es el nombre del modelo, m es migración
  -Se edita la migración create_posts_table agregando los campos
    $table->string('title');
    $table->mediumText('excerpt');
    $table->text('body');
    $table->timestamp('published_at')->nullable();
  -Se usa el comando php artisan migrate
Commit - Mostrando los posts desde la BD
  -Se crean 2 campos manualmente en la tabla Posts en la BD
    -Mi primer post -- Extracto de mi primer post -- <p>Contenido de mi primer post</p>
  -Se crea una ruta de prueba en web.php
  -Se edita la ruta por defecto en web.php
  -Se edita la vista welcome.blade.php para mostrar los Posts que fueron agregados manualmente
    Nota: Se dejaron entre comentarios los posts que no se usan todavía
    -Se edita el post con la clase post no-image
      -Se usa la directiva @foreach ($posts as $post) para mostrar todos los posts
Commit - Mostrando la fecha de publicación de los posts
   -Se edita el modelo Post agregando
    -protected $dates = ['published_at']; para decir que el campo published_at también sea una instancia de carbon la librería
  -Se edita la vista welcome para mostrar la fecha
    <span class="c-gray-1">{{ $post->published_at->format('M d') }}</span>
		<span class="c-gray-1">{{ $post->published_at->diffForHumans() }}</span>
Commit - Creando las categorías
  -Se usa el comando php artisan make:model Category -m para crear el modelo Category con su migración
  -Se edita la migración create_categories_table para agregar el campo name
    -$table->string('name');
  -Se usa el comando php artisan migrate
  -Se crea la función category en el modelo Post que tendrá la relación belongsTo() - uno a muchos
    -return $this->belongsTo(Category::class);
  -Se edita la migración create_posts_table para agregar el campo category_id después del campo published_at
    -$table->unsignedInteger('category_id');
  -Se usa el comando php artisan migrate:refresh para rehacer las tablas de la BD
  -Se vuelven a crear 2 registros manualmente en la BD en la tabla posts y 2 categorías en la tabla categories
    -Mi primer post--Extracto de mi primer post--<p>Contenido de mi primer post</p>--2019-08-05 13:17:57--2--2019-08-05 13:18:02--2019-08-05 13:18:03"
    -Mi segundo post--Extracto de mi segundo post--<p>Contenido de mi segundo post</p>--2019-08-05 13:17:57--1--2019-08-05 13:18:02--2019-08-05 13:18:03"
    -Categoría 1
    -Categoría 2
  -Se edita la vista welcome para mostrar la categoría usando la relación belongsTo
    -$post->category->name
      -Dónde $post es la variable del foreach, category es la función con belongsTo y name es el campo de la tabla categories
Commit - Implementando Seeders
  -Se crea el seeder usando el comando php artisan make:seeder PostsTableSeeder
  -Se registra PostsTableSeeder en el archivo DatabaseSeeder.php
  -Se edita la función run de PostsTableSeeder para crear posts
    Nota: No olvidar importar la clase Post y Category
      -use App\Post;
      -use App\Category;
    -Si se usa Carbon
      Nota: No olvidar importar la clase Carbon
        -use Carbon\Carbon;
  -Se usa el comando php artisan migrate:refresh para probar los seeds
  -Se usa el comando php artisan db:seed para llenar con información desde los seeders
    Nota: También se puede usar php artisan migrate:refresh --seed para refrescar las tablas y agregar los seeds
Commit - Creando las etiquetas
  -Se crea el modelo Tag con su migración usando el comando php artisan make:model Tag -m
    -Se edita la migración create_tags_table agregando el campo name
      -$table->string('name');
  -Se usa el comando php artisan migrate
  -Se crea la migración create_post_tag_table que guardará la relación belongsToMany entre posts y tags
    -php artisan make:migration create_post_tag_table --create=post_tag
      -Se agregan los campos para guardar los id's de la posts Post y la tabla tags
        $table->unsignedInteger('post_id');
        $table->unsignedInteger('tag_id');
  -Se usa el comando php artisan migrate
  -Se crean 2 registros manualmente en la BD para crear etiquetas
    -Etiqueta 1
    -Etiqueta 2
  -Se crean relaciones entre etiquetas y posts colocando los id's correspondientes de forma manual en la tabla post_tag de la BD
    -1 -- 1 .. dónde 1 es el id del post y 1 es el id del tag
    -1 -- 2 .. dónde 1 es el id del post y 2 es el id del tag
    -2 -- 1 .. dónde 2 es el id del post y 1 es el id del tag
    -3 -- 2 .. dónde 3 es el id del post y 2 es el id del tag
    -4 -- 1 .. dónde 4 es el id del post y 1 es el id del tag
    -4 -- 2 .. dónde 4 es el id del post y 2 es el id del tag
    -5 -- 1 .. dónde 5 es el id del post y 1 es el id del tag
  -Se crea la función tags en el modelo Post para hacer la relación muchos a muchos(belongsToMany)
    - return $this->belongsToMany(Tag::class);
  -Se edita la vista welcome.blade.php para mostrar las etiquetas
    -@foreach ($post->tags as $tag)
      -#{{ $tag->name }}
    -@endforeach
Commit - Integrando plantilla de administración AdminLTE
   -Se descarga la plantilla de AdminLTE 2.3.11 desde el sitio
    -https://github.com/ColorlibHQ/AdminLTE/releases/tag/v2.3.11
  -Se crea la carpeta adminlte en public/
    -Se copian dentro, las carpetas dist/css, dist/img, dist/js, bootstrap y plugins del archivo original al proyecto laravel5.4-BlogUdemy
  -Se crea la carpeta admin en resources/views/ y dentro el archivo layout.blade.php
  -Se copia el contenido del archivo starter.html y se pega en la vista layout.blade.php
  -Se edita la vista admin/layout.blade.php para modificar los href de la vista layout.blade.php para que apunten a la carpeta /adminlte/
    -En el apartado Main Content se agrega la directiva @yield('content')
  -Se crea la vista dashboard.blade.php dentro de la carpeta admin en resources/views/
  -Se edita el archivo web.php
    -Se elimina la ruta de prueba
    -Se crea la ruta admin 
Commit - Integrando el login
  -Se usa el comando php artisan make:auth --views para generar los archivos básicos para integrar el login
    -Dónde --views es un parámetro para solo crear las vistas de autenticación
  Nota: Se elimina el archivo app.css en public/css/ para igualar lo que se hace en el curso(no sé en que momento se eliminó)
  -Se copian las rutas de la función auth() que están en vendor/laravel/framework/src/Illuminate/Routing/Router.php(línea 1007)
   y se pegan en web.php
  -Se pone entre comentarios las rutas para Register
    Nota: Aparece un error de que la ruta register no está definida
    -Error: Route [register] not defined. (View: C:\laragon\www\Laravel5-4_BlogUdemy\resources\views\layouts\app.blade.php)
    Solución: Se debe editar la vista layouts.app.blade.php
      -Quitar la línea <li><a href="{{ route('register') }}">Register</a></li>
  -Se elimina la carpeta layouts que viene por defecto con el comando auth porque no se va a usar
  -Se edita la vista login en la directiva @extends para que extienda de admin.layout
  -Al final se copia todo el contenido de la plantilla Adminlte en pages/examples/login.html 
    -Se quitan las directivas extends y section y sin borrar nada se pega arriba porque se usará el código que generó el comando auth
    -Se van reemplazando cosas del código de auth al código de la plantilla de adminlte(muy extenso de documentar)
    -Se borra el código hecho por el comando auth cuando se termina de copiar al código de la plantilla admilte
    -Se actualizan las rutas de los href 
  -Se cambia el lenguaje de los mensajes de error
    -En config/app.php en la variable locale cambias de 'en' por 'es'
    -Se crea la carpeta es dentro de resources/lang 
      -Dónde 'es' es de español
    -Se copian los 4 archivos dentro de la siguiente url https://github.com/caouecs/Laravel-lang/tree/master/src/es
    -Se pegan dentro de resources/lang/es
  -Se le cambia el nombre a la aplicación desde el archivo .env en el campo APP_NAME=Zendero
  -Se le cambia el nombre a la aplicación tambien en el archivo config/app.php
    -Esto: 'name' => env('APP_NAME', 'Laravel'), por: 'name' => env('APP_NAME', 'Zendero'),
  -Se agregó un usuario usando la herramienta Tinker de laravel
    -php artisan tinker
    -$user = new App\User
    -$user->name = "Marco"
    -$user->email = "admin@mail.com"
    -$user->password = bcrypt('123456')
    -$user->save()
  -Se edita la ruta por admin cambiando admin por home
  -Se edita la vista /admin/dashboard.blade.php
    -Poniendo <p>Usuario autenticado: {{ auth()->user()->name }}</p> para comprobar si se inicio sesión
  -Se vuelve a editar la ruta admin agregandole un middleware auth
Commit - Personalizando el menú y utilizando controladores
  -Se edita la vista admin/layout.blade.php
    -Cambiando el title por  <title>{{ config('app.name') }}</title>
    -Varios cambios extenso de documentar
  -Se crea una carpeta llamada partials dentro de vies/admin/ y dentro el fragmento de visat nav.blade.php
  -Se crea la carpeta posts dentro de views/admin/ para guardar todo lo relacionado con los posts y dentro la vista index.blade.php
  -Se crea el controlador HomeController porque en mi proyecto no se genero al momento de usar el comando make:auth
    -php artisan make:controller HomeController
      -Se crea el constructor con el middleware auth
      -Se crea la función index para retornar la vista admin.dashboard
  -Se edita la ruta admin para redirigir a HomeController en su método index 
  -Se crea el controlador PagesController con el comando php artisan make:controller PagesController encargado de listar los posts
    -Se pasa lo que había en la ruta por defecto a la función home de PagesController
      Nota: Importar la clase use App\Post;
  -Se crea el controlador PostsController dentro de la carpeta Admin usando el comando php artisan make:controller Admin/PostsController
    -Se crea la función index devolviendo la vista admin.posts.index
  -Se crea un grupo de rutas para los posts si se está logueado 
Commit - Mostrando los posts en admin con Datatables
  -Se edita la ruta admin en web.php
    -Se le da un nombre a la ruta Route::get('posts', 'PostsController@index');
      -Route::get('posts', 'PostsController@index')->name('admin.posts.idex');
  -Se edita el partial admin/nav.blade.php agregando el href a ver todos los posts
    -href="{{ route('admin.posts.index') }}
  -Se edita la vista admin/layout.blade.php
    -Se corta el contenido de section page header y se cambia por la directiva @yield('header') para poder cambiarlo dependiendo la página
      -El header se agrega en el partial admin/posts/index.blade.php
      -Uno para header y otro para content
  -Para usar datatables se deben agregar los estilos y js en la vista layout.blade.php
    -Se editan los href del css y js para que vincule bien a la carpeta adminlte/
  -Se copia y edita el script de datatables que está al final del archivo pages/tables/data.html y se pega en la vista layout.blade.php
  -Se copia el datatables de pages/tables/data.html y se pega en la vista layout.blade.php
    -Se quita el contenido estático del tbody del datatable porque ahí van los posts de la BD
    -Se agrega el foreach que recorrerá los posts
  -Se edita la función index de PostsController para mandar los posts a la vista
    -$posts = Post::all();
      Nota: Importar el modelo 
        -use App\Post;
  -Se edita la vista admin/posts/index.blade.php
    -Se extiende de layout
    -Contiene 2 section(header y content)
    -Se edita el datatable para mostrar los posts y sus botones de edición y eliminación
Commit - Reestructuración de código y activación de links
  -Se edita el LoginController cambiando el redirect de /home a /admin
  -Se edita el middleware RedirectIfAuthenticated.php cambiando el redirect de /home a /admin
  -Se edita el nombre del controlador HomeController por AdminController
    -Se le cambia el nombre al archivo de HomeController.php por AdminController.php
    -Se cambia el nombre de class HomeController por class AdminController dentro del controlador
  -Se mueve el controlador AdminController a dentro de la carpeta Admin/
    -Edita el namespace del controlador AdminController
      -Esto: namespace App\Http\Controllers; por esto: namespace App\Http\Controllers\Admin; porque está dentro de la carpeta Admin
      Nota: Importar use App\Http\Controllers\Controller;
  -Se mueve la ruta admin a dentro del grupo de rutas Rutas para los posts si se está logueado
  -Se edita la ruta admin 
    -Esto: Route::get('home', 'AdminController@index'); por esto: Route::get('/', 'AdminController@index');
    -Se le da un nombre a la ruta Route::get('/', 'AdminController@index')->name('dashboard');
  -Se edita el partial nav.blade.php modificando los href y clase active para la activación de los links del menú navegación iquierdo
Commit - Creación del formulario para crear posts
  -Se crea la función create en PostsController
  -Se edita los href /admin/nav.blade.php para vincular ahacía vistas usando el herlper route('')
    -Se le agrega admin/posts* para mantener la barra de navegación desplegada {{ request()->is('admin/posts*') ?  'active' : '' }}
  -Se crea la ruta create en el grupo de rutas de admin
    -Route::get('posts/create', 'PostsController@create')->name('admin.posts.create');
  -Se crea y se edita la vista admin/posts/create.blade.php
  -Se edita la vista nav.blade.php para activar el link de navegación crear un post
  -Se editan los href de section header en los partials index.blade.php y  create.blade.php